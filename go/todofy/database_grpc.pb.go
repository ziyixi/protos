// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/todofy/database.proto

package todofy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataBaseServiceClient is the client API for DataBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataBaseServiceClient interface {
	// Create a new database.
	CreateIfNotExist(ctx context.Context, in *CreateIfNotExistRequest, opts ...grpc.CallOption) (*CreateIfNotExistResponse, error)
	// Write to the database.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Query recent entries in the database.
	QueryRecent(ctx context.Context, in *QueryRecentRequest, opts ...grpc.CallOption) (*QueryRecentResponse, error)
}

type dataBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataBaseServiceClient(cc grpc.ClientConnInterface) DataBaseServiceClient {
	return &dataBaseServiceClient{cc}
}

func (c *dataBaseServiceClient) CreateIfNotExist(ctx context.Context, in *CreateIfNotExistRequest, opts ...grpc.CallOption) (*CreateIfNotExistResponse, error) {
	out := new(CreateIfNotExistResponse)
	err := c.cc.Invoke(ctx, "/todofy.DataBaseService/CreateIfNotExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/todofy.DataBaseService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseServiceClient) QueryRecent(ctx context.Context, in *QueryRecentRequest, opts ...grpc.CallOption) (*QueryRecentResponse, error) {
	out := new(QueryRecentResponse)
	err := c.cc.Invoke(ctx, "/todofy.DataBaseService/QueryRecent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataBaseServiceServer is the server API for DataBaseService service.
// All implementations must embed UnimplementedDataBaseServiceServer
// for forward compatibility
type DataBaseServiceServer interface {
	// Create a new database.
	CreateIfNotExist(context.Context, *CreateIfNotExistRequest) (*CreateIfNotExistResponse, error)
	// Write to the database.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// Query recent entries in the database.
	QueryRecent(context.Context, *QueryRecentRequest) (*QueryRecentResponse, error)
	mustEmbedUnimplementedDataBaseServiceServer()
}

// UnimplementedDataBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataBaseServiceServer struct {
}

func (UnimplementedDataBaseServiceServer) CreateIfNotExist(context.Context, *CreateIfNotExistRequest) (*CreateIfNotExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIfNotExist not implemented")
}
func (UnimplementedDataBaseServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDataBaseServiceServer) QueryRecent(context.Context, *QueryRecentRequest) (*QueryRecentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecent not implemented")
}
func (UnimplementedDataBaseServiceServer) mustEmbedUnimplementedDataBaseServiceServer() {}

// UnsafeDataBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataBaseServiceServer will
// result in compilation errors.
type UnsafeDataBaseServiceServer interface {
	mustEmbedUnimplementedDataBaseServiceServer()
}

func RegisterDataBaseServiceServer(s grpc.ServiceRegistrar, srv DataBaseServiceServer) {
	s.RegisterService(&DataBaseService_ServiceDesc, srv)
}

func _DataBaseService_CreateIfNotExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIfNotExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServiceServer).CreateIfNotExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todofy.DataBaseService/CreateIfNotExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServiceServer).CreateIfNotExist(ctx, req.(*CreateIfNotExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBaseService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todofy.DataBaseService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBaseService_QueryRecent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServiceServer).QueryRecent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todofy.DataBaseService/QueryRecent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServiceServer).QueryRecent(ctx, req.(*QueryRecentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataBaseService_ServiceDesc is the grpc.ServiceDesc for DataBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todofy.DataBaseService",
	HandlerType: (*DataBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIfNotExist",
			Handler:    _DataBaseService_CreateIfNotExist_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _DataBaseService_Write_Handler,
		},
		{
			MethodName: "QueryRecent",
			Handler:    _DataBaseService_QueryRecent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/todofy/database.proto",
}
